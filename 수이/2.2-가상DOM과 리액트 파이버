## 2.2 가상 DOM과 리액트 파이버

리액트의 특징으로 가장 많이 언급되는 것 중 하나가 실제가 아닌 가상 DOM을 운영한다는 것이다.

## 2.2.1 DOM과 브라우저 랜더링 과정

DOM은 웹페이지에 대한 인터페이스로 브라우저가 웹페이지의 콘텐츠 구조를 어떻게 보여줄지에 대한 정보를 담고 있다.

[웹사이트 접근 요청을 받고 화면을 그리는 과정]

1. 브라우저 사용자가 요청한 주소를 방문해 html파일을 다운로드한다.
2. 브라우저 랜더링 엔진은 html을 파싱해 DOM 노드로 구성된 트리(DOM)를 만든다.
3. 2번 과정에서 css파일을 만나면 해당 css 파일도 다운로드 한다.
4. css도 파싱해 css노드로 구성된 트리(CSSOM)를 만든다.
5. 브라우저는 2번에서 만든 DOM노드를 순회하는데, 여기서 모든 노드를 방문하지 않고, 사자한테 보여지는 것만 보여줌!
6. 5번에서 제외된, 눈에 보이는 노드를 대상으로 해당 노드에 대한 CSSOM정보를 찾고 여기서 발견한 css스타일 정보를 이 노드에 사용한다. 

## 2.2.2 가상 DOM 탄생 배경

랜더링이 완료된 이후에도 사용자의 인터렉션으로 웹페이지가 변경되는 상황 또한 고려해야한다.

가상 DOM은 웹페이지가 표시해야할 DOM을 일단 메모리에 저장하고 리액트가 실제 변경에 대한 준비가 완료되었을 때 실제 브라우저의 DOM에 반영한다. package.json에 있는 react가 아닌 react-dom을 의미한다. DOM계산을 브라우저가 아닌 메모리에서 계산하는 과정을 한 번 거치게 된다면 실제로는 여러번 발생했을 랜더링 과정을 최소화 할 수 있고,브라우저와 개발자의 부담을 덜 수 있다.

 

## 2.2.3 가상 DOM을 위한 아키텍처, 리액트 파이버

가상 DOM과 랜더링 과정 최적화를 가능하게 해주는 것이 바로 리액트 파이버(React Fiber)다.  

*리액트 파이버(React Fiber)란?

평범한 자바스크립트 객체이다. 파이버는 파이버 재조정자(fiber reconciler)가 관리하는데, 이는 앞서 이야기한 가상 DOM과 실제 DOM을 비교하여 변경사항을 수집하며, 이 둘의 사이에 차이가 있으면 변경에 관련된 정보를 가지고 있는 파이버를 기준으로 화면에 랜더링을 요청하는 역할을 한다.

재조정이라는 용어가 낯설겠지만 리액트에서 어떤 부분을 새롭게 랜더링 해야 하는지 가상DOM과 실제 DOM을 비교하는 작업(알고리즘)이라고 이해하면된다. 

- 작업을 작은 단위로 분할 하고 쪼갠다음, 우선순위를 매긴다.
- 이러한 작업을 일시 중지하고 나중에 다시 시작할 수 있다.
- 이전에 했던 작업을 다시 재사용하거나 , 필요없는 경우 폐기할 수 있다.

이러한 과정들을 모두 비동기 처리방식으로 일어난다! 예를 들어, 검색한 UI에서 fetch 작업이 수행되면 네트워크 요청이 발생할 것이고, 이에 따라 로딩 스피너도 나타날 것이다. 사용자 인터렉션에 따른 동시 다발적인 이벤트와 애니메이션은 다양한 작업을 처리하는 요즘 웹 애플리케이션에서 피할 수 없는 문제이다. 파이버는 일단 하나의 작업 단위로 구성돼 있다. 리액트는 이러한 작업단위를 하나씩 처리하소 finshedWork()라는 작업으로 마무리한다.  파이버는 리액트 요소와 유사하다고 느낄 수 있지만 한 가지 중요한 차이점은 리액트 요소는 랜더링이 발생 할 때마다 새롭게 생성되지만 파이버는 가급적이면 재사용한다. 파이버는 컴포넌트가 최초로 마운트 되는 시점에 생성되어 이후에는 가급적 재사용된다.

생성된 파이버는 state가 변경되거나 생명주기 메서드가 실행되거나 DOM의 변경이 필요한 시점 등에 실행된다. 리액트 파이버의 가상 DOM이 생각보다 단순한 자바스크립트 객체로 관리되고 있다는 사실에 놀랄 수도 있다. 리액트의 핵심 원칙은 UI를 문자열,숫자,배열과 같은 값으로 관리한다는 것이다.

*리액트 파이버 트리

리액트  내부에는 두가지 트리가 있는데 1.파이버 트리 2.WorkInProgress 트리이다.

리액트 파이버의 작업이 끝나면 리액트는 단순히 포인터만 변경해 WorkInProgress 트리를 현재 트리로 바꿔버린다. 이러한 기술은 더블 버퍼링이다. 더블 버퍼링이란 그래픽을 통해 화면에 표시되는 것을 그리기 위해서는 내부적으로 처리를 거쳐야하는데, 이러한 처리를 거치게 되면 사용자에게 미처 다 그리지 못한 경우가 발생하게 된다. (한 번에 모든 작업을 마무리해 다 그릴 수 없기 때문이다.) 그래서 이러한 상황을 방지하기 위해 보이지 않는 곳에서 그 다음으로 그려야 할 그림을 미리 그린 다음, 이것이 완성되면 현재 상태를 새로운 그림으로 바꾸는 기법을 의미한다. 이 더블 버퍼링은 커밋단계에서 수행된다. WorkInProgress트리가 UI에 최종적으로 반영되어 완료되면, current가 WorkInProgress변경이 된다.

*파이버의 작업 순서

순차적으로 파이버 작업을 수행하는데(beginWork), 더 이상 자식이 없는 파이버를 만날 때까지 트리형식으로 작업

작업 끝나면 (completeWork), 형제가 있다면 형제 ⇒  모든 루트 노드가 완성되면 최종 commitWork수행 → DOM에 반영

만약 setState 등으로 업데이트가 발생하면, 이미 리액트는 앞서 만든 current 트리가 존재하고, setState로 인한 업데이트 요청을 받아 WorkInProgress트리를 다시 빌드하기 시작한다.  최초 렌더링 시에는 모든 파이버를 새롭게 만들어야 했지만 이제는 파이버가 이미 존재함으로 되도록 새로 생성하지 않고 기존 파이버에서 업데이트 된 props를 받아 파이버 내부에서 처리한다. “가급적 새로운 파이버를 생성하지 않는다.” 가급적 객체를 새롭게 만들기 보다는 기존에 있는 객체를 재활용하기 위해 내부 속성값만 초기화 하거나 바꾸는 형태로 트리를 업데이트 한다.

과거 동기식으로 처리했다는 작업이 바로 이 작업이다. 이트리 업데이트 과정, 재귀적으로 하나의 트리를 순회해 새로운 트리를 만드는 작업은 동기식이고 중단될 수 없었다.  그러나 현재 우선순위가 높은 다른 업데이트가 오면 현제 업데이트 작업을 일시 중단하거나 새롭게 만들거나,폐기할 수도 있다. 또한 작업 단위를 나누어 우선순위를 할당하는 것 또한 가능하다. 리액트는 이러한 작업을 파이버 단위로 너눠서 수행한다.

## 2.2.4 파이버와 가상 DOM

리액트 컴포넌트에 대한 정보를 1:1로 가지고 있는 것이 파이버이며, 이 파이버는 리액트 아키텍처 내부에서 비동기로  이뤄진다.

오직 웹 애플리케이션에서만 통영되는 개념이다. 리액트 파이버는 리액트 네이티브와 같은 브라우저가 아닌 환경에서도 사용할 수 있기 때문에 파이버와 가상 DOM은 동일한 개념이 아니다.

## 2.2.5 정리

가상 DOM과 파이버는 단순히 브라우저에 DOM을 변경하는 작업보다 빠르다는 이유로만 만들어진 것은 아니다. 어려움을 리액트 내부의 파이버와 재조정자가 내부적인 알고리즘을 통해 관리해 줌으로써 대규모 웹 애플리케이션을 효율적으로 유지보수하고 관리할 수 있게 된 것이다.

가상 DOM과 리액트의 핵심은 브라우저의 DOM을 더욱 빠르게 반영하는것이 아니라 바로 값으로 UI를 표현하는 것이다. 화면에 표시되는 UI를 자바스크립트의 문자열, 배열 등과 마찬가지로 값으로 관리하고 이러한 흐름을 효율적으로 관리하기 위한 메커니즘이 바로 리액트의 핵심이다.
